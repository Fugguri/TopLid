from asyncio import sleep
import calendar
import datetime
from keyboards import start_keyboard, keywords_list, unexcept_keywords_list, words_list, back, chats_list_, chats_key
from aiogram.dispatcher.filters import Text
from aiogram import types
from main import dp, db, bot
from aiogram.dispatcher.filters.state import State, StatesGroup


class AddUnex_Word(StatesGroup):
    word = State()


'''–ò—Å–∫–ª—é—á–∞—é—â–∏–µ —Å–ª–æ–≤–∞ !!!'''


@ dp.message_handler(Text(equals='–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∏—Å–∫–ª—é—á–∞—é—â–∏–µ —Å–ª–æ–≤–∞'))
async def unexcepted_keywords_list(message: types.Message):
    await message.answer(text="–í—ã —É–¥–∞–ª–∏–ª–∏ –≤—Å–µ –∏—Å–∫–ª—é—á–∞—é—â–∏–µ —Å–ª–æ–≤–∞.\n –ù–µ –∑–∞–±—É–¥—å—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ!",
                         reply_markup=unexcept_keywords_list())
    db.delete_all(message.from_user.id, 'users_unex_words')


@ dp.message_handler(Text(equals='–°–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–∞—é—â–∏—Ö —Å–ª–æ–≤'))
async def unexcepted_keywords_list(message: types.Message):
    if db.is_pay(message.from_user.id):
        keywords = db.all_unex_words(message.from_user.id)
        await message.answer(text="–°–ø–∏—Å–æ–∫ –∏–ª—é—á–∞—é—â–∏—Ö —Å–ª–æ–≤!\n –ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–ª–æ–≤–æ!",
                             reply_markup=words_list(keywords))
    else:
        await message.answer(text="""–í–∞—à —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–º –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞
–ü–æ–¥–ø–∏—Å–∫—É –º–æ–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ –∫–Ω–æ–ø–∫–µ ¬´–æ–ø–ª–∞—Ç–∞ üí∞¬ª""")


@ dp.message_handler(Text(equals='–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∏—Å–∫–ª—é—á–∞—é—â–µ–µ —Å–ª–æ–≤–æ'))
async def add_word_menu(message: types.Message):
    if db.is_pay(message.from_user.id):
        await AddUnex_Word.word.set()
        await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –∏—Å–∫–ª—é—á–∞—é—â–µ–µ —Å–ª–æ–≤–æ", reply_markup=back())
    else:
        await message.answer(text="""–í–∞—à —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–º –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞
–ü–æ–¥–ø–∏—Å–∫—É –º–æ–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ –∫–Ω–æ–ø–∫–µ ¬´–æ–ø–ª–∞—Ç–∞ üí∞¬ª""")


@ dp.message_handler(Text(equals="–ù–∞–∑–∞–¥"), state=AddUnex_Word.word)
async def add_word(message: types.Message, state: State):
    await state.finish()
    await message.answer(text='–ë–æ—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.'
                         '–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å/—É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–∞ –∏ —Ñ—Ä–∞–∑—ã, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å—Å—è –ø–æ–∏—Å–∫ –≤ —á–∞—Ç–∞—Ö –≤ –ø—É–Ω–∫—Ç–µ –º–µ–Ω—é "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞" –Ω–∏–∂–µ\n\n'
                         '–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–∏—Å–∫ –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç—ã –≤ –º–µ–Ω—é ‚Äú–ß–∞—Ç—ã‚Äù, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.',
                         reply_markup=unexcept_keywords_list())


@ dp.message_handler(state=AddUnex_Word.word)
async def add_word(message: types.Message):
    db.add_unex_word(message.from_user.id, str(message.text))
    keywords = db.all_unex_words(message.from_user.id)
    await message.answer(
        text="–í–∞—à–∏ –∏—Å–∫–ª—é—á–∞—é—â–∏–µ —Å–ª–æ–≤–∞\n–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –Ω–∞–∂–º–∏ –Ω–∞ —Å–ª–æ–≤–æ", reply_markup=words_list(keywords))


@ dp.callback_query_handler(lambda call: call.data in db.all_unex_words(call['from']['id']), state=AddUnex_Word.word)
async def remove_word(call: types.CallbackQuery):
    keywords = db.remove_unex_word(call['from']['id'], call.data)
    await call.message.answer("–°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤!\n –ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–ª–æ–≤–æ!",
                              reply_markup=words_list(keywords))
