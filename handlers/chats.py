from asyncio import sleep
import calendar
import datetime
from keyboards import start_keyboard, keywords_list, unexcept_keywords_list, words_list, back, chats_list_, chats_key
from aiogram.dispatcher.filters import Text
from aiogram import types
from main import dp, db, bot
from aiogram.dispatcher.filters.state import State, StatesGroup


class AddChat(StatesGroup):
    chat = State()
    end_date = State()
    messages = State()


end_date_message = {}
'''–ß–∞—Ç—ã !!!'''


@ dp.message_handler(Text(equals='–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —á–∞—Ç—ã'))
async def unexcepted_keywords_list(message: types.Message):
    if db.is_pay(message.from_user.id) is False:
        await message.answer(text="""–í–∞—à —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–º –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞
–ü–æ–¥–ø–∏—Å–∫—É –º–æ–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ –∫–Ω–æ–ø–∫–µ ¬´–æ–ø–ª–∞—Ç–∞ üí∞¬ª""")
    else:
        db.delete_all(message.from_user.id, 'users_chats')
        await message.answer(text="–í—ã —É–¥–∞–ª–∏–ª–∏ –≤—Å–µ —á–∞—Ç—ã.\n –ù–µ –∑–∞–±—É–¥—å—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ!",
                             reply_markup=chats_list_(message.from_user.id))


@ dp.message_handler(Text(equals="–°–æ–±–∏—Ä–∞—Ç—å –∏–∑ –≤—Å–µ—Ö —á–∞—Ç–æ–≤"))
async def all_chat_acces(message: types.Message):
    if db.is_pay(message.from_user.id):
        db.set_status(message.from_user.id, 1)
        await message.answer(text="–í—ã –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –Ω–∞—à—É –±–∞–∑—É —á–∞—Ç–æ–≤",
                             reply_markup=chats_list_(message.from_user.id))
    else:
        await message.answer(text="""–í–∞—à —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–º –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞
–ü–æ–¥–ø–∏—Å–∫—É –º–æ–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ –∫–Ω–æ–ø–∫–µ ¬´–æ–ø–ª–∞—Ç–∞ üí∞¬ª""")


@ dp.message_handler(Text(equals="–°–æ–±–∏—Ä–∞—Ç—å –∏–∑ –º–æ–∏—Ö —á–∞—Ç–æ–≤"))
async def all_chat_acces(message: types.Message):
    if db.is_pay(message.from_user.id):
        db.set_status(message.from_user.id, 0)
        await message.answer(text="–í—ã –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤",
                             reply_markup=chats_list_(message.from_user.id))
    else:
        await message.answer(text="""–í–∞—à —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–º –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞
–ü–æ–¥–ø–∏—Å–∫—É –º–æ–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ –∫–Ω–æ–ø–∫–µ ¬´–æ–ø–ª–∞—Ç–∞ üí∞¬ª""")


@ dp.message_handler(Text(equals='–ú–æ–∏ —á–∞—Ç—ã'))
async def chatse_list(message: types.Message):
    keywords = db.all_user_chats(message.from_user.id)
    text = "–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —á–∞—Ç–æ–≤!\n–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —á–∞—Ç!"
    try:
        await message.answer(text=str(text),
                             reply_markup=chats_key(keywords))
    except:
        text += '\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —á–∞—Ç–æ–≤. –í—ã –º–æ–∂–µ—Ç–µ –∏—Ö –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—ã"'
        await message.answer(text=str(text))


@ dp.message_handler(Text(equals='–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç'))
async def add_word_menu(message: types.Message):
    if db.is_pay(message.from_user.id):
        await AddChat.chat.set()
        await message.answer(text="–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç", reply_markup=back())
    else:
        await message.answer(text="""–í–∞—à —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–º –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞
–ü–æ–¥–ø–∏—Å–∫—É –º–æ–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ –∫–Ω–æ–ø–∫–µ ¬´–æ–ø–ª–∞—Ç–∞ üí∞¬ª""")


@ dp.callback_query_handler(lambda call: call.data in list(map(lambda x: x[:20], db.all_user_chats(call['from']['id']))))
async def remove_chat(call: types.CallbackQuery):
    text = (call["message"]["reply_markup"]["inline_keyboard"])
    text = [i[0]['text'] for i in text if call.data in i[0]['text']]
    db.remove_chat(call['from']['id'], text[0])
    keywords = db.all_user_chats(call['from']['id'])
    await call.message.answer("–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —á–∞—Ç–æ–≤!\n–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞!",
                              reply_markup=chats_key(keywords))


@ dp.message_handler(Text(equals="–ù–∞–∑–∞–¥"), state=AddChat)
async def add_word(message: types.Message, state: State):
    await state.finish()
    await message.answer(text='–ë–æ—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.\n'
                         '–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å / —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–∞ –∏ —Ñ—Ä–∞–∑—ã, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å—Å—è –ø–æ–∏—Å–∫ –≤ —á–∞—Ç–∞—Ö –≤ –ø—É–Ω–∫—Ç–µ –º–µ–Ω—é\n"–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞" –Ω–∏–∂–µ\n\n'
                         '–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–∏—Å–∫ –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç—ã –≤ –º–µ–Ω—é ‚Äú–ß–∞—Ç—ã‚Äù, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.',
                         reply_markup=chats_list_(message.from_user.id))


@ dp.message_handler(Text(equals="–ü–æ–∏—Å–∫ –ø–æ —á–∞—Ç–∞–º(–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)"))
async def add_word(message: types.Message, state: State):
    await AddChat.end_date.set()
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É, –ø–æ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ–º —Å–æ–±–∏—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ. –§–æ—Ä–º–∞—Ç YYYY-MM-DD(2020-12-20)')


@ dp.message_handler(lambda message: message.text, state=AddChat.end_date)
async def add_word(message: types.Message, state: State):
    await AddChat.messages.set()
    print(message.text)
    keywords = db.all_user_chats(message.from_user.id)
    global end_date_message
    end_date_message[message.from_user.id] = message.text
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ', reply_markup=chats_key(keywords))


@ dp.callback_query_handler(lambda call: call.data in list(map(lambda x: x[:20], db.all_user_chats(call['from']['id']))), state=AddChat.messages)
async def remove_chat(callback: types.CallbackQuery):
    text = (callback["message"]["reply_markup"]["inline_keyboard"])
    text = [i[0]['text'] for i in text if callback.data in i[0]['text']][0]
    await callback.message.answer(text='–ü–æ—Å–ª–µ —Å–±–æ—Ä–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤–∞–º –±—É–¥–µ—Ç –≤—ã—Å–ª–∞–Ω —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π', reply_markup=back())
    chat_id = db.get_chat_id(text)
    user_id = callback.from_user.id
    await get_message_history_by_keywords(chat_id, user_id)

    try:
        with open(f"chats/{chat_id}.txt", "rb") as w:
            await callback.message.answer_document(document=w)
    except:
        await callback.message.answer(text='–í–∏–¥–∏–º–æ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å—É –≤ –¥–∞–Ω–Ω–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–º –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ ', reply_markup=back())


async def get_message_history_by_keywords(chat_id, user_id):
    from HearBot2 import clients
    for client in clients:
        print("try")
        async with client:
            # try:
            await mes(chat_id, client, user_id)
            break
            # except:
            #     print('except')
    return


async def mes(chat_id, client, user_id):
    getmessage = client.iter_messages(chat_id)
    keywords = db.all_words(user_id)
    unex_words = db.all_unex_words(user_id)
    print("try")
    with open(f"chats/{chat_id}.txt", "w") as w:
        async for message in getmessage:
            print(str(message.date)[:-15])
            if message.message != None:
                key = any(
                    list(map(lambda x: x in message.message, keywords)))
                unex = any(
                    list(map(lambda x: x in message.message, unex_words)))
                if key and not unex:
                    mes = "\n"+str(message.date)[:-15] + \
                        message.message + \
                        "\n -------------------------------- \n"
                    w.write(mes)
            elif str(message.date)[:-15] == end_date_message[user_id].strip():
                return
            else:
                continue
        return


@ dp.callback_query_handler(lambda call: call.data in list(map(lambda x: x[:20], db.all_user_chats(call['from']['id']))), state=AddChat.chat)
async def remove_chat(call: types.CallbackQuery):
    text = (call["message"]["reply_markup"]["inline_keyboard"])
    text = [i[0]['text'] for i in text if call.data in i[0]['text']]
    db.remove_chat(call['from']['id'], text[0])
    keywords = db.all_user_chats(call['from']['id'])

    await call.message.answer("–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —á–∞—Ç–æ–≤!\n–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞!",
                              reply_markup=chats_key(keywords))


@ dp.callback_query_handler(lambda call: call.text in db.all_user_chats(call['from']['id']), state=AddChat.chat)
async def remove_chat(call: types.CallbackQuery):
    keywords = db.remove_chat(call['from']['id'], call.text)
    await call.message.answer("–°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤!\n–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–ª–æ–≤–æ!",
                              reply_markup=words_list(keywords))


@ dp.message_handler(state=AddChat.chat)
async def add_word(message: types.Message):
    await bot.send_message(chat_id=5593323077, text=f'/request {str(message.text)} {message.from_user.id}')
    await sleep(1.5)
    chats = db.all_user_chats(message.from_user.id)
    await message.answer(
        text="–í–∞—à–∏ —á–∞—Ç—ã. –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —á–∞—Ç –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è, –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –±–æ—Ç –≤—Å—Ç—É–ø–∏—Ç –≤ —á–∞—Ç.\n–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞", reply_markup=chats_key(chats))
